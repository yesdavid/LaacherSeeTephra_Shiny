[{"name":"app.R","content":"library(magrittr)\nlibrary(shiny)\nlibrary(shinyWidgets)\nlibrary(bslib)\nlibrary(ggplot2)\nlibrary(leaflet)\nlibrary(plotly)\nlibrary(DT)\n\n\nLSTbase <- readr::read_csv(url(\"https://raw.githubusercontent.com/yesdavid/LaacherSeeTephra_Shiny/refs/heads/main/1_data/LSTbase.csv\"))\nLSTbase$`Mean thickness (cm)` <- as.double(LSTbase$`Mean thickness (cm)`)\nLSTbase$`Distance from vent (km)` <- as.double(LSTbase$`Distance from vent (km)`)\n\nphases <- c(\"LLST\", \"MLST\", \"MLST-A\", \"MLST-B\", \"MLST-C\", \"MLST-C1\", \"MLST-C2\", \"MLST-C3\", \"ULST\", \"Various\")\n\nLSTbase <- \ntidyr::pivot_longer(data = LSTbase,\n                    cols = phases,\n                    names_to = \"Phase\") %>% \n  subset(value == 1) %>% \n  dplyr::select(-value)\n\ncountries <- unique(LSTbase$Country)\n\n\n# set.seed(1)\n# ggpal <- randomcoloR::distinctColorPalette(length(phases))\n# names(ggpal) <- phases\n\nggpal <- c(\"LLST\" = \"#FF0000\",\n           \"MLST\" = \"#DF7850\", \n           \"MLST-A\" = \"#CA5B85\", \n           \"MLST-B\" = \"#BF4CA0\", \n           \"MLST-C\" = \"#B53DBA\", \n           \"MLST-C1\" = \"#AA2ED5\", \n           \"MLST-C2\" = \"#A020F0\", \n           \"MLST-C3\" = \"#5010BD\", \n           \"ULST\" = \"darkblue\", \n           \"Various\" = \"yellow\")\n\npal <- leaflet::colorFactor(ggpal,\n                            domain = phases\n)\n\n\n\n###########################################\nui <- page_sidebar(\n  theme = bslib::bs_theme(bootswatch = \"flatly\"),\n  title = \"Laacher See Tephra\",\n  sidebar = sidebar(\n    helpText(\n      \"Select and submit\"\n    ),\n    shiny::checkboxInput(inputId = \"archaeology\", \n                         label = \"Associated archaeology\", \n                         value = FALSE),\n    shiny::checkboxGroupInput(\n      inputId = \"Country\",\n      label = \"Country\",\n      choices = countries,\n      selected = countries\n    ),\n    shiny::checkboxGroupInput(\n      inputId = \"Phase\",\n      label = \"Phase\",\n      choices = phases,\n      selected = phases\n    ),\n    \n    # Add a submit button\n    actionButton(inputId = \"submit_btn\", label = \"Submit\")\n  ),\n  layout_columns(\n    # map\n    card(\n      card_header(\"Map\"),\n      leafletOutput(\"map\")\n    ),\n\n    # tephra\n    card(\n      card_header(\"Tephra thickness\"),\n      plotlyOutput(\"tephra\")\n    ),\n\n    # dataframe\n    card(\n      card_header(\"Data\"),\n      dataTableOutput(\"table\")\n    ),\n    col_widths = c(6, 6, 12),\n    row_heights = c(2, 1)\n  )\n)\n\n\n\n###########################################\n\nserver <-\n  function(input, output, session) {\n    # When the submit button is pressed, update the reactive data\n    selected_Countries <- eventReactive(input$submit_btn, {\n      # Only update this when the submit button is pressed\n      req(input$Country) # make sure input$Country is not NULL\n      if(input$archaeology == FALSE) {\n        dplyr::filter(LSTbase, Country %in% input$Country & Phase %in% input$Phase)\n      } else {\n        dplyr::filter(LSTbase, Country %in% input$Country & Phase %in% input$Phase & !(`Associated archaeology` %in% NA))\n      }\n    })\n\n    # 1. Render DataTable\n    output$table <- DT::renderDT(\n      {\n        req(selected_Countries())\n        datatable(selected_Countries(), \n                  selection = \"single\")\n      },\n      server = FALSE\n    )\n\n    # 2. Render leaflet map\n      output$map <- renderLeaflet({\n        req(selected_Countries())\n        map_data <- selected_Countries()\n        leaflet(map_data) %>%\n          addProviderTiles(providers$Esri.WorldGrayCanvas) %>%\n          addMarkers(lat = 50.410278, lng = 7.269722, label = \"Laacher See Volcano\") %>%\n          addCircleMarkers(~Longitude, ~Latitude,\n                           popup = ~ as.character(paste0(\"Site: \", `Site name`, \" | \",\n                                                         \"Phase: \", `Phase`, \" | \",\n                                                         \"Mean thickness (cm): \", `Mean thickness (cm)`, \" | \",\n                                                         \"Archaeology: \", `Associated archaeology`)),\n                           color = ~ pal(Phase), layerId = ~`Site name`,\n                           opacity = 1,\n                           radius = ~ scales::rescale(map_data$`Mean thickness (cm)`, to = c(10, 30), from = range(map_data$`Mean thickness (cm)`, na.rm = TRUE, finite = TRUE))\n          ) %>%\n          fitBounds(\n            min(map_data$Longitude), min(map_data$Latitude),\n            max(map_data$Longitude), max(map_data$Latitude)\n          ) %>%\n          addLegend(\"bottomright\", pal = pal, values = map_data$Phase, title = \"Phase\")\n      })\n\n\n    # 3. Render Plotly plot\n    output$tephra <- renderPlotly({\n      req(selected_Countries())\n      plot_data <- selected_Countries()\n\n      tephra_plot <- \n        ggplot(\n          data = plot_data,\n          aes(\n            x = `Distance from vent (km)`,\n            # y = log(`Mean thickness (cm)`),\n            y = `Mean thickness (cm)`,\n            fill = Phase,\n            key = `Site name`#,\n            # shape = `Fan direction...23`\n          ),\n          color = \"black\"\n        ) +\n        geom_jitter(size = 4) +\n        theme_bw() +\n        scale_fill_manual(values = ggpal) +\n        theme(legend.position = \"none\") + \n        scale_y_log10() +\n        ylab(\"log(Mean thickness (cm))\")#+\n        # scale_shape_manual(values = c(\"N\" = \"\\u2b06\",\n        #                               \"S\" = \"\\u2b07\",\n        #                               \"W\" = \"\\u2b05\", \n        #                               \"E\" = \"\\u2b62\",\n        #                               \"NE\" = \"\\u2b08\",\n        #                               \"Near-vent\" = \"\\u2b24\"))\n\n      ggplotly(tephra_plot) %>%\n        layout(dragmode = \"select\")\n    })\n  }\n\n\n# Run the app ----\nshinyApp(ui = ui, server = server)\n","type":"text"},{"name":"modify_spreadsheet.R","content":"library(readxl)\nLSTbase <- read_excel(\"1_data/LSTbase_Dec2024_dnm.xlsx\", \n                             sheet = \"LSTbase\",\n                             skip = 1)\n# View(LSTbase)\n\nfor (i in colnames(LSTbase)) {\n  \n  if (dplyr::select(LSTbase, i)[[1]] %>%  \n      is.na() %>% \n      all() == TRUE) {\n    \n    LSTbase <- dplyr::select(LSTbase, -i)\n    \n  }\n\n}\n\n# View(LSTbase)\n\n\nLSTbase$unique_id <- 1:nrow(LSTbase)\n\nreadr::write_csv(LSTbase,\n                 file = file.path(\"1_data\", \"LSTbase.csv\"))\n\n\n\n","type":"text"}]
